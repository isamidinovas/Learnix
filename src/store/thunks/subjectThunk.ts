import { createAsyncThunk } from "@reduxjs/toolkit";
import { setSubjects, setLoading, setError } from "../reducers/subjectSlice";
import { showErrorToast } from "../../utils/toast";

export const getSubjects = createAsyncThunk(
  "subjects/getSubjects",
  async (_, { dispatch }) => {
    try {
      dispatch(setLoading(true));
      const response = await fetch("http://localhost:8000/subject");

      if (!response.ok) {
        throw new Error("–ü—Ä–µ–¥–º–µ—Ç—Ç–µ—Ä–¥–∏ –∞–ª—É—É–¥–∞ –∫–∞—Ç–∞ –∫–µ—Ç—Ç–∏");
      }

      const data = await response.json();

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      const subjects = data.map((subject: any) => ({
        id: subject.id,
        name: subject.name,
        icon: getSubjectIcon(subject.name),
        color: getSubjectColor(subject.name),
      }));

      dispatch(setSubjects(subjects));
      dispatch(setLoading(false));
      return subjects;
    } catch (error) {
      dispatch(setError("–ü—Ä–µ–¥–º–µ—Ç—Ç–µ—Ä–¥–∏ –∞–ª—É—É–¥–∞ –∫–∞—Ç–∞ –∫–µ—Ç—Ç–∏"));
      dispatch(setLoading(false));
      showErrorToast("–ü—Ä–µ–¥–º–µ—Ç—Ç–µ—Ä–¥–∏ –∞–ª—É—É–¥–∞ –∫–∞—Ç–∞ –∫–µ—Ç—Ç–∏");
      throw error;
    }
  }
);

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫ –∏ —Ü–≤–µ—Ç–æ–≤
const getSubjectIcon = (name: string): string => {
  const icons: { [key: string]: string } = {
    –•–∏–º–∏—è: "‚öóÔ∏è",
    –§–∏–∑–∏–∫–∞: "üî≠",
    –ë–∏–æ–ª–æ–≥–∏—è: "üß¨",
    –≠–∫–æ–Ω–æ–º–∏–∫–∞: "üí∞",
    –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: "‚àö",
    –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞: "üíª",
    –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è: "üß†",
    –ì–µ–æ–≥—Ä–∞—Ñ–∏—è: "üåç",
    –ê–¥–∞–±–∏—è—Ç: "üìñ",

    –ë–∞–∞—Ä—ã: "üìò",
  };
  return icons[name] || "üìö";
};

const getSubjectColor = (name: string): string => {
  const colors: { [key: string]: string } = {
    –•–∏–º–∏—è: "text-orange-500",
    –§–∏–∑–∏–∫–∞: "text-purple-500",
    –ë–∏–æ–ª–æ–≥–∏—è: "text-green-500",
    –≠–∫–æ–Ω–æ–º–∏–∫–∞: "text-yellow-500",
    –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: "text-blue-400",
    –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞: "text-orange-400",
    –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è: "text-indigo-600",
    –ë–∞–∞—Ä—ã: "text-blue-600",
  };
  return colors[name] || "text-gray-600";
};
